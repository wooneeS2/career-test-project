{"ast":null,"code":"var _jsxFileName = \"/Users/kimwonhee/Desktop/GitHub/career-test-project/career-psycololgy-test/src/components/MakePagination.js\",\n    _s = $RefreshSig$();\n\nimport ReactPaginate from \"react-paginate\";\nimport React, { useEffect, useState } from \"react\";\nimport \"../style_components/pagination.css\";\nimport QuestionList from \"../style_components/CustomQuestions\";\nimport { PageButton, NextBtnWithoutLink } from \"../style_components/CustomButtons\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function PaginatedItems(_ref) {\n  _s();\n\n  let {\n    itemsPerPage,\n    items,\n    questionIndex\n  } = _ref;\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  const [itemOffset, setItemOffset] = useState(0);\n  const [newAnswr, setNewAnswr] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  useEffect(() => {\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n    endOffset === pageCount * itemsPerPage ? setIsEnd(true) : setIsEnd(false);\n  }, [itemOffset, itemsPerPage]);\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  const Items = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"items\",\n      children: currentItems && currentItems.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuestionList, {\n          index: q.qitemNo,\n          questions: q,\n          handleRadioBtn: e => {\n            const values = e.target.value;\n            const oneAnswr = {\n              id: q.qitemNo,\n              value: values\n            };\n            setNewAnswr(() => {\n              const temp = newAnswr;\n              temp.push(oneAnswr);\n              const newLen = newAnswr.slice().reverse().filter((v, i, a) => a.findIndex(t => t.id === v.id) === i).reverse();\n              console.log(newLen);\n              return temp;\n            });\n            console.log(\"new::\", newAnswr);\n          }\n        }, `${index}${q[index]}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)\n      }, `${index}${q[index]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  };\n\n  let history = useHistory();\n\n  function handleClick() {\n    let arrLen = newAnswr.slice().reverse().filter((v, i, a) => a.findIndex(t => t.id === v.id) === i).reverse().sort(function (a, b) {\n      return a.id - b.id;\n    }).length;\n    console.log(arrLen); // if (arrLen < 28) {\n    //   {\n    //     alert(\"모든 문항에 답변을 체크해주세요\");\n    //     return;\n    //   }\n    // } else {\n\n    history.push({\n      pathname: \"/test-finish\",\n      state: {\n        newAnswr: newAnswr.slice().reverse().filter((v, i, a) => a.findIndex(t => t.id === v.id) === i).reverse().sort(function (a, b) {\n          return a.id - b.id;\n        })\n      }\n    }); // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems,\n      number: questionIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      nextLabel: /*#__PURE__*/_jsxDEV(PageButton, {\n        title: \"다음\",\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 20\n      }, this),\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: /*#__PURE__*/_jsxDEV(PageButton, {\n        title: \"이전\",\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 24\n      }, this),\n      containerClassName: \"pagination\",\n      renderOnZeroPageCount: null,\n      pageClassName: \"numbering\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), isEnd ? /*#__PURE__*/_jsxDEV(NextBtnWithoutLink, {\n      title: \"검사 완료\",\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(PaginatedItems, \"GgVkZKeqlmFpnnIMBniEPzJ7x4s=\", false, function () {\n  return [useHistory];\n});\n\n_c = PaginatedItems;\nexport default PaginatedItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginatedItems\");","map":{"version":3,"sources":["/Users/kimwonhee/Desktop/GitHub/career-test-project/career-psycololgy-test/src/components/MakePagination.js"],"names":["ReactPaginate","React","useEffect","useState","QuestionList","PageButton","NextBtnWithoutLink","useHistory","PaginatedItems","itemsPerPage","items","questionIndex","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","newAnswr","setNewAnswr","isEnd","setIsEnd","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected","Items","map","q","index","qitemNo","e","values","target","value","oneAnswr","id","temp","push","newLen","reverse","filter","v","i","a","findIndex","t","history","handleClick","arrLen","sort","b","pathname","state"],"mappings":"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","sourcesContent":["import ReactPaginate from \"react-paginate\";\nimport React, { useEffect, useState } from \"react\";\nimport \"../style_components/pagination.css\";\nimport QuestionList from \"../style_components/CustomQuestions\";\nimport {\n  PageButton,\n  NextBtnWithoutLink,\n} from \"../style_components/CustomButtons\";\nimport { useHistory } from \"react-router-dom\";\n\nexport function PaginatedItems({ itemsPerPage, items, questionIndex }) {\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  const [itemOffset, setItemOffset] = useState(0);\n  const [newAnswr, setNewAnswr] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n\n  useEffect(() => {\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n    endOffset === pageCount * itemsPerPage ? setIsEnd(true) : setIsEnd(false);\n  }, [itemOffset, itemsPerPage]);\n\n  const handlePageClick = event => {\n    const newOffset = (event.selected * itemsPerPage) % items.length;\n    console.log(\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n\n  const Items = () => {\n    return (\n      <div className=\"items\">\n        {currentItems &&\n          currentItems.map((q, index) => (\n            <div key={`${index}${q[index]}`}>\n              <QuestionList\n                key={`${index}${q[index]}`}\n                index={q.qitemNo}\n                questions={q}\n                handleRadioBtn={e => {\n                  const values = e.target.value;\n                  const oneAnswr = {\n                    id: q.qitemNo,\n                    value: values,\n                  };\n\n                  setNewAnswr(() => {\n                    const temp = newAnswr;\n                    temp.push(oneAnswr);\n                    const newLen = newAnswr\n                      .slice()\n                      .reverse()\n                      .filter(\n                        (v, i, a) => a.findIndex(t => t.id === v.id) === i\n                      )\n                      .reverse();\n                    console.log(newLen);\n\n                    return temp;\n                  });\n\n                  console.log(\"new::\", newAnswr);\n                }}\n              />\n            </div>\n          ))}\n      </div>\n    );\n  };\n\n  let history = useHistory();\n  function handleClick() {\n    let arrLen = newAnswr\n      .slice()\n      .reverse()\n      .filter((v, i, a) => a.findIndex(t => t.id === v.id) === i)\n      .reverse()\n      .sort(function (a, b) {\n        return a.id - b.id;\n      }).length;\n    console.log(arrLen);\n\n    // if (arrLen < 28) {\n    //   {\n    //     alert(\"모든 문항에 답변을 체크해주세요\");\n    //     return;\n    //   }\n    // } else {\n    history.push({\n      pathname: \"/test-finish\",\n      state: {\n        newAnswr: newAnswr\n          .slice()\n          .reverse()\n          .filter((v, i, a) => a.findIndex(t => t.id === v.id) === i)\n          .reverse()\n          .sort(function (a, b) {\n            return a.id - b.id;\n          }),\n      },\n    });\n    // }\n  }\n\n  return (\n    <>\n      <Items currentItems={currentItems} number={questionIndex} />\n      {/* TODO 응답 배열의 개수 == endOffset이면 버튼 활성화 */}\n\n      <ReactPaginate\n        nextLabel={<PageButton title={\"다음\"} disabled={true} />}\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel={<PageButton title={\"이전\"} disabled={true} />}\n        containerClassName=\"pagination\"\n        renderOnZeroPageCount={null}\n        pageClassName=\"numbering\"\n      />\n\n      {/* TODO 응답 배열의 개수 !== 전체 문항의 개수 경고문 표시하고 링크 작동 X */}\n      {/* {<NextBtn toPath={\"/test-finish\"} title={\"검사완료\"} isActive={false} />} */}\n      {isEnd ? (\n        <NextBtnWithoutLink title={\"검사 완료\"} onClick={handleClick} />\n      ) : null}\n    </>\n  );\n}\n\nexport default PaginatedItems;\n"]},"metadata":{},"sourceType":"module"}